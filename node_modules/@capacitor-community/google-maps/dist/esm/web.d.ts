import { WebPlugin } from "@capacitor/core";
import { CapacitorGoogleMapsPlugin, CallbackID, InitializeOptions, CreateMapOptions, CreateMapResult, UpdateMapOptions, UpdateMapResult, RemoveMapOptions, ClearMapOptions, MoveCameraOptions, ElementFromPointResultOptions, AddMarkerOptions, AddMarkerResult, AddMarkersOptions, AddMarkersResult, RemoveMarkerOptions, AddPolygonOptions, AddPolygonResult, RemovePolygonOptions, DidTapInfoWindowCallback, DidCloseInfoWindowCallback, DidTapMapCallback, DidLongPressMapCallback, DidTapMarkerCallback, DidBeginDraggingMarkerCallback, DidDragMarkerCallback, DidEndDraggingMarkerCallback, DidTapMyLocationButtonCallback, DidTapMyLocationDotCallback, DidTapPoiCallback, DidBeginMovingCameraCallback, DidMoveCameraCallback, DidEndMovingCameraCallback, DefaultEventOptions, DefaultEventWithPreventDefaultOptions } from "./definitions";
export declare class CapacitorGoogleMapsWeb extends WebPlugin implements CapacitorGoogleMapsPlugin {
    constructor();
    initialize(_options: InitializeOptions): Promise<void>;
    createMap(_options: CreateMapOptions): Promise<CreateMapResult>;
    removeMap(_options: RemoveMapOptions): Promise<void>;
    clearMap(_options: ClearMapOptions): Promise<void>;
    updateMap(_options: UpdateMapOptions): Promise<UpdateMapResult>;
    moveCamera(_options: MoveCameraOptions): Promise<void>;
    addMarker(_options: AddMarkerOptions): Promise<AddMarkerResult>;
    addMarkers(_options: AddMarkersOptions): Promise<AddMarkersResult>;
    removeMarker(_options: RemoveMarkerOptions): Promise<void>;
    addPolygon(_options: AddPolygonOptions): Promise<AddPolygonResult>;
    removePolygon(_options: RemovePolygonOptions): Promise<void>;
    didTapInfoWindow(_options: DefaultEventOptions, _callback: DidTapInfoWindowCallback): Promise<CallbackID>;
    didCloseInfoWindow(_options: DefaultEventOptions, _callback: DidCloseInfoWindowCallback): Promise<CallbackID>;
    didTapMap(_options: DefaultEventOptions, _callback: DidTapMapCallback): Promise<CallbackID>;
    didLongPressMap(_options: DefaultEventOptions, _callback: DidLongPressMapCallback): Promise<CallbackID>;
    didTapMarker(_options: DefaultEventWithPreventDefaultOptions, _callback: DidTapMarkerCallback): Promise<CallbackID>;
    didBeginDraggingMarker(_options: DefaultEventOptions, _callback: DidBeginDraggingMarkerCallback): Promise<CallbackID>;
    didDragMarker(_options: DefaultEventOptions, _callback: DidDragMarkerCallback): Promise<CallbackID>;
    didEndDraggingMarker(_options: DefaultEventOptions, _callback: DidEndDraggingMarkerCallback): Promise<CallbackID>;
    didTapMyLocationButton(_options: DefaultEventWithPreventDefaultOptions, _callback: DidTapMyLocationButtonCallback): Promise<CallbackID>;
    didTapMyLocationDot(_options: DefaultEventWithPreventDefaultOptions, _callback: DidTapMyLocationDotCallback): Promise<CallbackID>;
    didTapPoi(_options: DefaultEventOptions, _callback: DidTapPoiCallback): Promise<CallbackID>;
    didBeginMovingCamera(_options: DefaultEventOptions, _callback: DidBeginMovingCameraCallback): Promise<CallbackID>;
    didMoveCamera(_options: DefaultEventOptions, _callback: DidMoveCameraCallback): Promise<CallbackID>;
    didEndMovingCamera(_options: DefaultEventOptions, _callback: DidEndMovingCameraCallback): Promise<CallbackID>;
    elementFromPointResult(_options: ElementFromPointResultOptions): Promise<void>;
}
